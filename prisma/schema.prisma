generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model User {
  id            String        @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  phone         String?
  birthday      DateTime?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  categories    Category[]
  transactions  Transaction[]

  @@unique([email])
  @@map("user")
}

model Transaction {
  id          String          @id @default(nanoid())
  amount      Float
  description String?
  date        DateTime
  type        TransactionType
  category    Category        @relation(fields: [categoryId], references: [id])
  categoryId  String
  userId      String
  user        User            @relation(fields: [userId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Category {
  id           String          @id @default(nanoid())
  name         String
  icon         String          @default("")
  type         TransactionType // نوع دسته‌بندی (مثلاً "expense" یا "income")
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  user         User?           @relation(fields: [userId], references: [id])
  userId       String?
  transactions Transaction[]
}

enum TransactionType {
  expense
  income
}
